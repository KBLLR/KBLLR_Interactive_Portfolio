/*!
* v-tweakpane v0.0.2
* (c) 2021 Vinayak Kulkarni
* @license MIT
*/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue'), require('tweakpane')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue', 'tweakpane'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.VTweakpane = {}, global.vue, global.tweakpane));
}(this, (function (exports, vue, tweakpane) { 'use strict';

  function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }


    var script = vue.defineComponent({
      name: 'VTweakpane',
      props: {
        pane: {
          type: Object ,
          default: () => {},
          required: true,
        },
      },
      setup(props) {
        // Number of elements to bind the panes
        const el = vue.ref(null);

        // Number of panes to show
        const pane = vue.ref(null);

        vue.onMounted(() => {
          vue.nextTick(() => {
            if (el.value instanceof Element) {
              pane.value = new tweakpane.Pane({
                container: el.value,
                title: props.pane.title,
                expanded: props.pane.expanded,
              });
              if (_optionalChain([props, 'access', _ => _.pane, 'optionalAccess', _2 => _2.inputs]) && props.pane.inputs.length > 0) {
                props.pane.inputs.forEach((input) => {
                  for (const [key] of Object.entries(input)) {
                    _optionalChain([pane, 'access', _3 => _3.value, 'optionalAccess', _4 => _4.addInput, 'call', _5 => _5(input, key)]);
                  }
                });
              }
              if (
                _optionalChain([props, 'access', _6 => _6.pane, 'optionalAccess', _7 => _7.folders]) &&
                Object.keys(props.pane.folders).length > 0
              ) {
                props.pane.folders.forEach((folder) => {
                  _optionalChain([pane, 'access', _8 => _8.value, 'optionalAccess', _9 => _9.addFolder, 'call', _10 => _10(folder)]);
                });
              }
              if (_optionalChain([props, 'access', _11 => _11.pane, 'optionalAccess', _12 => _12.tabs]) && Object.keys(props.pane.tabs).length > 0) {
                props.pane.tabs.forEach((tab) => {
                  _optionalChain([pane, 'access', _13 => _13.value, 'optionalAccess', _14 => _14.addTab, 'call', _15 => _15(tab)]);
                });
              }
            }
          });
        });

        return {
          el,
        };
      },
    });

  const _hoisted_1 = { class: "w-full h-full" };
  const _hoisted_2 = { ref: "el" };

  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (vue.openBlock(), vue.createBlock("main", _hoisted_1, [
      vue.createVNode("div", _hoisted_2, null, 512 /* NEED_PATCH */)
    ]))
  }

  script.render = render;
  script.__file = "src/components/VTweakpane.vue";

  const setVueInstance = (instance) => {
  };

  let installed = false;

  const install = (
    instance,
  ) => {
    if (!installed) {
      setVueInstance(instance);
      instance.component('VTweakpane', script);
      installed = true;
    }
  };

  exports.VTweakpane = script;
  exports.default = install;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=v-tweakpane.js.map
